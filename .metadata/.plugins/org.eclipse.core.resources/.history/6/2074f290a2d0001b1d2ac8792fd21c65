package com.training.boot.ms.controller;

import java.math.BigDecimal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Example;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.training.boot.ms.dao.FlightFareRepository;
import com.training.boot.ms.model.FlightFare;

@RestController
@RequestMapping(value="/api/v1/flight/{flightcode}/fare/{currency}")
public class FlightFareController {

	@Autowired
	private FlightFareRepository repository;
	
	@Value("${base.currency}")
	private String baseCurrency;
	
	
	@GetMapping
	public FlightFare getSingleFareTicket(@PathVariable String flightCode, @PathVariable String currency)
	{
		FlightFare fare  = this.getFlightFare(flightCode);
		fare.setCurrency(currency);
		
		if(!baseCurrency.equals(currency)) {
			// conversion rate
		}
		return fare;
	}
	
	
	private FlightFare getFlightFare(String flightCode) {
		
		FlightFare flight = new FlightFare(null, flightCode, null);
		Example<FlightFare> flightFare = Example.of(flight);
		FlightFare fare = repository.findOne(flightFare).get();
		return fare;
	}
	
	// Call the currency conversion service here
	private BigDecimal getConversionBigDecimal(String toCurrency) {
		
		// call to currency-conversion-service
		RestTemplate restTemplate = new RestTemplate();

		final String baseUrl = "http://localhost:7101/api/v1/from/USD/to/" + toCurrency;
		
			
			// create map object to store parameters and their values in key-value 
			
			URI uri = null;
			try {
				uri = new URI(baseUrl);
			} catch (URISyntaxException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			// restTemplate - exchange(URI, http method, return response type)
			// in response you receive an json object as string
			// convert string inot JSON object
			// alternative, you can create a separate DTO for the response
			// ResponseEntity class - complete response packet (header + body)
			ResponseEntity<CurrencyConversion> responseEntity = restTemplate.getForEntity(uri, CurrencyConversion.class);
			CurrencyConversion converter = responseEntity.getBody();
			//System.out.println("CurrencyConversion - " + converter.getEnvironment());
			return converter.getConversionRate();
	}
	
	
}
